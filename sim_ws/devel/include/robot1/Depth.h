// Generated by gencpp from file robot1/Depth.msg
// DO NOT EDIT!


#ifndef ROBOT1_MESSAGE_DEPTH_H
#define ROBOT1_MESSAGE_DEPTH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot1
{
template <class ContainerAllocator>
struct Depth_
{
  typedef Depth_<ContainerAllocator> Type;

  Depth_()
    : encoding()
    , is_bigendian(0)
    , data()  {
    }
  Depth_(const ContainerAllocator& _alloc)
    : encoding(_alloc)
    , is_bigendian(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _encoding_type;
  _encoding_type encoding;

   typedef uint8_t _is_bigendian_type;
  _is_bigendian_type is_bigendian;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::robot1::Depth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot1::Depth_<ContainerAllocator> const> ConstPtr;

}; // struct Depth_

typedef ::robot1::Depth_<std::allocator<void> > Depth;

typedef boost::shared_ptr< ::robot1::Depth > DepthPtr;
typedef boost::shared_ptr< ::robot1::Depth const> DepthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot1::Depth_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot1::Depth_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot1::Depth_<ContainerAllocator1> & lhs, const ::robot1::Depth_<ContainerAllocator2> & rhs)
{
  return lhs.encoding == rhs.encoding &&
    lhs.is_bigendian == rhs.is_bigendian &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot1::Depth_<ContainerAllocator1> & lhs, const ::robot1::Depth_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot1::Depth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot1::Depth_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot1::Depth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot1::Depth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot1::Depth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot1::Depth_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot1::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d92edb9cf281cc6148c6af12ac4ac794";
  }

  static const char* value(const ::robot1::Depth_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd92edb9cf281cc61ULL;
  static const uint64_t static_value2 = 0x48c6af12ac4ac794ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot1::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot1/Depth";
  }

  static const char* value(const ::robot1::Depth_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot1::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string encoding\n"
"uint8 is_bigendian\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::robot1::Depth_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot1::Depth_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.encoding);
      stream.next(m.is_bigendian);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Depth_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot1::Depth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot1::Depth_<ContainerAllocator>& v)
  {
    s << indent << "encoding: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.encoding);
    s << indent << "is_bigendian: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_bigendian);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT1_MESSAGE_DEPTH_H
