// Generated by gencpp from file robot1/board.msg
// DO NOT EDIT!


#ifndef ROBOT1_MESSAGE_BOARD_H
#define ROBOT1_MESSAGE_BOARD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot1
{
template <class ContainerAllocator>
struct board_
{
  typedef board_<ContainerAllocator> Type;

  board_()
    : table()  {
    }
  board_(const ContainerAllocator& _alloc)
    : table(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _table_type;
  _table_type table;





  typedef boost::shared_ptr< ::robot1::board_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot1::board_<ContainerAllocator> const> ConstPtr;

}; // struct board_

typedef ::robot1::board_<std::allocator<void> > board;

typedef boost::shared_ptr< ::robot1::board > boardPtr;
typedef boost::shared_ptr< ::robot1::board const> boardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot1::board_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot1::board_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot1::board_<ContainerAllocator1> & lhs, const ::robot1::board_<ContainerAllocator2> & rhs)
{
  return lhs.table == rhs.table;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot1::board_<ContainerAllocator1> & lhs, const ::robot1::board_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot1::board_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot1::board_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot1::board_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot1::board_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot1::board_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot1::board_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot1::board_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4fc566b67f0715ec037ec3bb197f924";
  }

  static const char* value(const ::robot1::board_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4fc566b67f0715eULL;
  static const uint64_t static_value2 = 0xc037ec3bb197f924ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot1::board_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot1/board";
  }

  static const char* value(const ::robot1::board_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot1::board_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32[] table\n"
;
  }

  static const char* value(const ::robot1::board_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot1::board_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.table);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct board_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot1::board_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot1::board_<ContainerAllocator>& v)
  {
    s << indent << "table[]" << std::endl;
    for (size_t i = 0; i < v.table.size(); ++i)
    {
      s << indent << "  table[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.table[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT1_MESSAGE_BOARD_H
